// Explicit calculation of an endomorphism F in End(J) as a map in Mor(Kum(J), Kum(J) )
// given F where J is the Jacobian of the hyperelliptic curve y^2 = x^5 - (a^5 - b^2)
// This generalization for any endomorphism was thanks to the ideas provided by Prof. Michael Stoll
//
// You can run this freely in: http://magma.maths.usyd.edu.au/calc/
// Eduardo Ruiz Duarte & Marc Paul Noordman
//

//Domain of the morphism to calculate is Kummer in P3, needs 4 coordinates
DomVarNumHomCoords := 4;

//Image of the morphism to calculate is Kummer in P3, needs 4 coordinates
ImageVarNumHomCoords := 4;

// We are planning to calculate [sqrt(5)] map in the kummer which
// is defined by quintic polynomials. Deg(sqrt(5))=#ker(sqrt(5))=25=5^KumDim
HomDegTargetMap := 5;

//Base field to work
F<z> := CyclotomicField(5);
R<x0,x1,x2,x3> := PolynomialRing(F,DomVarNumHomCoords);
monobasis := MonomialsOfDegree(R,HomDegTargetMap);


/////////////////// BEGIN POINTS INTERPOLATION
F<z> := CyclotomicField(5);
// (Almost) Arbitrary base point, we chose one with low height in the Jacobian of the resulting curve
Pt := [-1,1];
Qx := Pt[1];
Qy := Pt[2];
h := Qy^2 - Qx^5;
if h eq 0 then
        printf "This point is not possible to use to construct a curve of the form y^2=x^5 + h\n";
        exit;
end if;
R<X> := PolynomialRing(F);
Jac := Jacobian(HyperellipticCurve(X^5 + h));
Jac;
Kum := KummerSurface(Jac);
Pt := Jac![X-Qx, Qy];
// Here, you can put any element of End(J) , like 2,3,z or Sqrt(5)=1+2*z^2 +2*z^3

N := 1+2*z^2+2*z^3;

// Since we know that End(J)~= Z[z], we construct z^n*D for D in J which is just multiplying the x coordinates of the support of D by z^n
// in MAGMA representation (Mumford)
multzn := function (n, pt)
                return elt<Parent(pt) | z^(pt[3]*n)*Evaluate(pt[1], z^-n*Parent(pt[1]).1), Evaluate(pt[2], z^-n*Parent(pt[2]).1), pt[3]>;
         end function;

// This is the action of w \in End(J) ~= Z[z] on D in J.
// We have that w = c_0+c_1*z+c_2*z^2+c_3*z^3 in End(J), here we calculate Sum of C_i*multz(i,D)
End_Action:= function (w, D)
                return &+[(Integers()!s[i+1])*multzn(i,D) : i in [0..#s-1]] where s:= Eltseq(w);
end function;


// Here we iterate our base point Pt in J under a lot of endomorphisms
// to generate more points of J. Then, we also save its corresponding
// images under N. Finally, We save these pairs of points maped to the Kummer surface
// in order to use them to deduce the formulas of the N map
// on the Kummer surface. if N is "big" more points will be needed
// therefore [-2..2] would need to be increased.
printf "Generating Kummer points and its images under N..\n";

time pairs := [<Eltseq(Kum!newPt), Eltseq(Kum!(End_Action(N, newPt)))>
         where newPt := End_Action(e0+e1*z+e2*z^2+e3*z^3, Pt)
       : e0,e1,e2,e3 in [-2..2]];
// Eliminate duplicates since J -> Kum is 2:1 and may have duplicate images if
// -D and D were generated in the iteration.


// truncate to use less points, in fact 69 are needed for Sqrt[5]
// do not know exactly why 69 on this case or how many are needed
// in the general case so we comment this and use "a lot of points" instead
//pairs := pairs[1..69];

pairs := Setseq(Set(pairs));




printf "Number of interpolation points = %o\n", #pairs;

// We separate points generated and its images under the endomorphism ordered

Pts := [];
EndActionPts:=[];
for i:= 1 to #pairs do
        Pts := Append(Pts,pairs[i][1]);
        EndActionPts := Append(EndActionPts,pairs[i][2]) ;
end for;
/////////////////// END POINTS INTERPOLATION




// final matrix that will be solved to get the coefficients of the polynomial map
// obtained from the images EndActionPts of the points Pts
Z := ZeroMatrix(F, ImageVarNumHomCoords*#EndActionPts , ImageVarNumHomCoords*#monobasis + #EndActionPts);

// This is a submatrix of Z that will hold the evaluation of Pts on each Monomial basis element
M := ZeroMatrix(F, #EndActionPts,#monobasis);


// Get all the coeficients for the monomial basis
// using our set of points
for i:=1 to #Pts do
for j:=1 to #monobasis do
        M[i,j] := Evaluate(monobasis[j],Pts[i]);
end for;
end for;

d:=[];

// The images of the interpolating points under the action
// of the endomorphism (in diagonal matrices since
// we want for each point homothethy, [a:b] ~ [ka:kb] therefore we have
//#EndActionPts k variables more. These are various matrices,
// one for each coordinate of the image variety.
V := [];
for i:=1 to ImageVarNumHomCoords do
        for j:=1 to #EndActionPts do
                d := Append(d,EndActionPts[j][i]);
        end for;
        V := Append(V,DiagonalMatrix(F,d));
        d := [];
end for;


//We are solving the coefficients of Dim(Pn)+1 polynomials, that is
//one for each coordinate. Here we insert all the blocks to solve
//at the same time every polynomial coordinate:


Mt := M;
for j := 1 to ImageVarNumHomCoords-1 do
        M := DirectSum(M,Mt);
end for;

// We insert the previous block in the final system
Z := InsertBlock(Z,M,1,1);

// We insert the image points blocks in the final system.
// besides each of the previous blocks (equated to each of the previous blocks)

for j := 1 to ImageVarNumHomCoords do
Z := InsertBlock(Z,V[j], (j-1)*#EndActionPts+1,#monobasis*ImageVarNumHomCoords+1);
end for;

// Solve, we take the transpose since magma solves xM=v for x.
K := KernelMatrix(Transpose(Z));

// We scan for the row that contains and projective solution
// for the coefficients, usually this is in the last row
// this solution is saved in S.
p := [];
t := 0;
done := false;
for j :=  1 to Nrows(K) do
S := K[j];
for k := 1 to DomVarNumHomCoords do
        for i:=1 to #monobasis do
         t := t+monobasis[i]*K[j][(k-1)*#monobasis + i];
        end for;
        p[k] := t;
        if p[k] eq 0 then
                break;
        end if;
        if k eq 4 then
                done := true;
        end if;
        t := 0;
end for;
        if done then

                break;
        end if;
end for;


// We get the scaling factor of the coordinates
//s := Lcm(Eltseq(ChangeRing(Submatrix(S,1,Ncols(S)-#Pts+1,1,#Pts),Integers())));

// We cut the projective scaling factors to obtain the coefficients of the map
//CoefsMap := Eltseq(Submatrix(S/s,1,1,1,#monobasis*ImageVarNumHomCoords));
CoefsMap := Eltseq(Submatrix(S,1,1,1,#monobasis*ImageVarNumHomCoords));


scalefactor := Gcd(Eltseq(ChangeRing(Vector(CoefsMap),MaximalOrder(F))));
scalefactor;
CoefsMap := Eltseq(Vector(CoefsMap)/scalefactor);

// We construct the polynomial map using the basis and the solutions obtained so far
MapPols := [];
tpol := 0;
for j := 1 to ImageVarNumHomCoords do
        for i := 1 to #monobasis do
                tpol := tpol+monobasis[i]*CoefsMap[i + (j-1)*#monobasis];

        end for;
        MapPols := Append(MapPols, tpol);
        tpol := 0;
end for;
MapPols;



////// TEST formulae
p := MapPols;

printf "Starting the tests of formula using Jacobian over function field\n";
// The order of the variables was chosen so that MAGMA prioritizes eliminating c and d
// rather than a and b. This to speed up computations considerably.
PE<C,D,A,B> := PolynomialRing(F, 4);
RE<Z> := PolynomialRing(PE);
eqns := Coefficients((RE!(Z^5 + h) - (C*Z+D)^2) mod (Z^2 + A*Z + B));
FJ<c,d,a,b> := FieldOfFractions(quo<PE| eqns>);
PF<X> := PolynomialRing(FJ);
CF := HyperellipticCurve(X^5 + h);
JF := Jacobian(CF);
KF := KummerSurface(JF);
printf "Is our construction of the function field of J in fact a field?: %o\n", IsField(FJ);
KF;
//Generic point of J and its image on its Kummer
genpt := elt<JF | X^2+a*X+b, c*X+d, 2>;
Kgenpt:=KF!genpt;


printf "Evaluating the generic point with our formulas and comparing with the action of N using the generic point in the Kummer Surface:\n";
time KF![Evaluate(pf,Eltseq(Kgenpt)) : pf in p] eq KF!(End_Action(N,genpt));


//printf "Checking the formulas against some divisors of J/Q (just for fun, if previous is true, then this should all be true)\n";
//pt := Jac![X-Qx,Qy];
//kpt := Kum!pt;
//for n in [ -100..100 ] do
//       n;
//       Kum![Evaluate(pf,Eltseq(Kum! (n*pt) )) : pf in p] eq Kum!(End_Action(N, n*pt));
//end for;
